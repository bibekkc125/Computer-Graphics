#include SDLSDL.h
#include GLglew.h
#include iostream
#include string
#include fstream
#include sstream
#include cmath
#include glmglm.hpp
#include glmgtcmatrix_transform.hpp
#include glmgtctype_ptr.hpp
#define STB_IMAGE_IMPLEMENTATION
#include STB_IMAGEstb_image.h
using namespace std;

enum GameState { PLAY, EXIT };
SDL_Window _window = nullptr;
GameState _state = PLAY;

  vbo, vao and shader program
unsigned int VBO, VBO1, VAO, VAO1;
unsigned int shaderProgram, texture;

float timeValue = 0.0f;

 Defining the vertices of the Wind Mill Stand
float bar[] = {
	-0.1f, -1.0f, 0.0f, 0.0f, bottom left
	0.1f, -1.0f, 1.0f, 0.0f, bottom right
	0.02f, 0.0f, 0.5f, 1.0f, top right

	0.02f, 0.0f, 0.5f, 1.0f, top right
	-0.1f, -1.0f, 0.0f, 0.0f, bottom left
	-0.02f, 0.0f, 0.0f, 1.0f top left

							0.0f, 0.0f,   lower-left corner  
							1.0f, 0.0f,   lower-right corner
							0.5f, 1.0f    top-center corner
};

float wings[] = {
	0.0f, 0.0f,
	0.45f, 0.25f,
	0.35f, 0.4f,

	0.0f, 0.0f,
	-0.45f, 0.25f,
	-0.35f, 0.4f,

	-0.10f, -0.5f,
	0.10f, -0.5f,
	0.0f, 0.0f
};

string ReadFile(const char file) {
	ifstream input(file);

	stringstream buffer;
	buffer  input.rdbuf();

	string fileContent = buffer.str();
	return fileContent;
}

void compileShader() {
	 making shader
	GLint vertexShader;
	vertexShader = glCreateShader(GL_VERTEX_SHADER);

	string vertexSource = ReadFile(ShadersShader.vert);
	const char vertexSourceConst = vertexSource.c_str();
	glShaderSource(vertexShader, 1, &vertexSourceConst, NULL);
	glCompileShader(vertexShader);

	 making shader
	GLint fragmentShader;
	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);

	string fragmentSource = ReadFile(ShadersShader.frag);
	const char fragmentSourceConst = fragmentSource.c_str();
	glShaderSource(fragmentShader, 1, &fragmentSourceConst, NULL);
	glCompileShader(fragmentShader);


	shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	glLinkProgram(shaderProgram);

	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);
}

void setUpBufferObjects() {
	glGenBuffers(1, &VBO);
	glGenVertexArrays(1, &VAO);

	glGenBuffers(1, &VBO1);
	glGenVertexArrays(1, &VAO1);

	 for wings
	glBindVertexArray(VAO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(bar), bar, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 4  sizeof(float), (void)0);
	glEnableVertexAttribArray(0);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	 for wings
	glBindVertexArray(VAO1);
	glBindBuffer(GL_ARRAY_BUFFER, VBO1);
	glBufferData(GL_ARRAY_BUFFER, sizeof(wings), wings, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2  sizeof(float), (void)0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	 Creating the texture
	glGenTextures(1, &texture);
	glBindTexture(GL_TEXTURE_2D, texture);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	 load the data
	int width, height, nrChannels;
	unsigned char  data = stbi_load(Textureswings2.jpg, &width, &height, &nrChannels, 0);

	if (data) {
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else {
		cout  Error  endl;
	}

	stbi_image_free(data);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);
}

void processInput() {
	SDL_Event evnt;
	while (SDL_PollEvent(&evnt)) {
		switch (evnt.type)
		{
		case SDL_QUIT
			_state = EXIT;
		}
	}
}

void drawGraphics() {
	glClearDepth(1.0);
	glClear(GL_COLOR_BUFFER_BIT  GL_DEPTH_BUFFER_BIT);

	glmmat4 model;
	glmmat4 view;
	glmmat4 projection;

	glUseProgram(shaderProgram);
	projection = glmperspective(glmradians(45.0f), (float)700  (float)640, 0.1f, 100.0f);
	view = glmtranslate(view, glmvec3(0.0f, 0.0f, -2.5f));

	unsigned int viewLoc = glGetUniformLocation(shaderProgram, view);
	unsigned int projectionLoc = glGetUniformLocation(shaderProgram, projection);

	glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glmvalue_ptr(projection));
	glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glmvalue_ptr(view));


	glBindVertexArray(VAO);
	model = glmrotate(model, 0.0f, glmvec3(0.0f, 0.0f, 1.0f));

	unsigned int modelLoc = glGetUniformLocation(shaderProgram, model);

	glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glmvalue_ptr(model));


	glDrawArrays(GL_TRIANGLES, 0, 6);
	glBindVertexArray(0);

	glBindVertexArray(VAO1);
	timeValue = SDL_GetTicks()  0.001f;
	model = glmrotate(model, timeValue, glmvec3(0.0f, 0.0f, 1.0f));
	unsigned int newmodelLoc = glGetUniformLocation(shaderProgram, model);

	glUniformMatrix4fv(newmodelLoc, 1, GL_FALSE, glmvalue_ptr(model));
	glDrawArrays(GL_TRIANGLES, 0, 9);
	glBindVertexArray(0);

	SDL_GL_SwapWindow(_window);
}

void gameLoop() {
	while (_state != EXIT) {

		processInput();  Handeling inputs

		drawGraphics();  Drawing Graphics
	}
}

int main(int argc, char argv) {
	if (SDL_Init(SDL_INIT_VIDEO)  0) {
		cout  Cannot initialize the subsystem!  endl;
	}
	else {
		_window = SDL_CreateWindow(Wind Mill, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 700, 640, SDL_WINDOW_OPENGL);

		if (_window == nullptr) {
			cout  Cannot create window  endl;
		}
		else {

			SDL_GLContext glContext = SDL_GL_CreateContext(_window);
			if (glContext == nullptr) {
				cout  Error creating OpenGL context  endl;
			}

			glewExperimental = GL_TRUE;
			GLenum error = glewInit();
			if (error != GLEW_OK) {
				cout  Doesn't support OpenGL  endl;
			}

			glClearColor(0.9f, 0.9f, 0.9f, 1.0f);
			glClear(GL_COLOR_BUFFER_BIT);
			SDL_GL_SwapWindow(_window);

			compileShader();

			setUpBufferObjects();

			gameLoop();
		}
	}

	return 0;
}