//3D Reflection

#define GLEW_STATIC
#include <glew.h>
#include <glfw3.h>
#include <iostream>
#include <cmath>
using namespace std;

const unsigned int width = 800;
const unsigned int height = 800;

//Escape key is used to exit window
void processInput(GLFWwindow *window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
}

//window changes accordingly when resized
void window_resize(GLFWwindow *window, int width, int height) {
	glViewport(0, 0, width, height);
}

//Matrix multiplication
void matrixMultiply(int x1, int y1, int z1, int x2, int y2, int z2,int x3,int y3,int z3)
{
	int i, j, k;
	int D[4][1], E[4][1], F[4][1];

	int A[4][4] = { 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 };
	int B[4][1] = { x1, y1, z1, 1 };
	int C[4][1] = { x2, y2, z2, 1 };
	int P[4][1] = { x3, y3, z3, 1 };

	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 1; j++)
		{
			D[i][j] = 0;
			E[i][j] = 0;
			F[i][j] = 0;
			for (k = 0; k < 4; k++)
			{
				D[i][j] += A[i][k] * B[k][j];
				E[i][j] += A[i][k] * C[k][j];
				F[i][j] += A[i][k] * P[k][j];
			}
		}
	}
	cout << D[0][0] << ' ' << D[1][0] << ' ' << D[2][0] <<"\n";
	cout << E[0][0] << ' ' << E[1][0] << ' ' << E[2][0] <<"\n";
	cout << F[0][0] << ' ' << F[1][0] << ' ' << F[2][0] <<"\n";
	cout << "\n";
	glColor3f(0.0f, 0.f, 0.1f);
	glBegin(GL_TRIANGLES);
	glVertex3f((float)D[0][0] / 100, (float)D[1][0] / 100, (float)D[2][0] / 100);
	glVertex3f((float)E[0][0] / 100, (float)E[1][0] / 100, (float)E[2][0] / 100);
	glVertex3f((float)F[0][0] / 100, (float)F[1][0] / 100, (float)F[2][0] / 100);

	glEnd();
}

//Reflect function
void reflect(int a, int b, int c, int d,int e,int f,int g,int h,int i) {
	glColor3f(0.0f, 0.0f, 0.0f);
	glBegin(GL_TRIANGLES);
	glVertex3f((float)a / 100, (float)b / 100, (float)c / 100);
	glVertex3f((float)d / 100, (float)e / 100, (float)f / 100);
	glVertex3f((float)g / 100, (float)h / 100, (float)i / 100);
	glEnd();

}

int main() {
	int tx, ty, tz, x1, y1, z1, x2, y2, z2, x3, y3, z3;

	//Initialize window
	glfwInit();
	GLFWwindow *window = glfwCreateWindow(width, height, "New Window", NULL, NULL);

	if (!window) {
		std::cout << "Failed to initialize window";
	}
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, window_resize);
	glewInit();

	/*cout << "Enter translation distances x, y and z: ";
	cin >> tx >> ty >> tz;
	cout << "\n";*/

	cout << "Enter Vertices of triangle : ";
	cin >> x1 >> y1 >> z1 ;
	cout << "\n";
	cin >> x2 >> y2 >> z2;
	cout << "\n";
	cin >> x3 >> y3 >> z3;

	//main loop
	while (!glfwWindowShouldClose(window)) {
		processInput(window);
		glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		//Drawing Axes
		glBegin(GL_LINES);
		glVertex3f(1, 0,0);
		glVertex3f(-1, 0,0);
		glVertex3f(0, 1,0);
		glVertex3f(0, -1,0);
		glVertex3f(0, 0, -1);
		glVertex3f(0, 0, 1);
		glEnd();

		reflect(x1, y1, z1, x2, y2, z2, x3, y3, z3);
		matrixMultiply(x1, y1, z1, x2, y2, z2, x3, y3, z3);

		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glfwTerminate();
	return 0;
}