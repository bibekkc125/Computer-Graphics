#include <iostream>
#define GLEW_STATIC
#include <glew.h>
#include <glfw3.h>
void DrawCircle(float cx, float cy, float r, int num_segments)
{
	glBegin(GL_TRIANGLE_FAN);
	
	for (int ii = 0; ii < num_segments; ii++)
	{
		float theta = 2.0f * 3.1415926f * float(ii) / float(num_segments);//get the current angle 
		float x = r * cosf(theta);//calculate the x component 
		float y = r * sinf(theta);//calculate the y component 
		glVertex2f(x + cx, y + cy);//output vertex 
	}
	glEnd();
}

void DrawStar(float cx, float cy, float radius, int numPoints)
{

	const float DegToRad = 3.14159 / 180;
	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_TRIANGLE_FAN);
	int count = 1;
	for (int i = 0; i <= 360; i += 360/ (numPoints * 2)) {
		float DegInRad = i * 360.0 / (numPoints*2) * DegToRad;
		if (count % 2 == 0)
			glVertex2d(cx + cos(DegInRad) * radius, cy + sin(DegInRad) * radius);
		else
			glVertex2d((cx + cos(DegInRad) * radius / 2), (cy + sin(DegInRad) * radius / 2));
		count++;
	}
	glEnd();
}


int main() {
	glfwInit();
	GLFWwindow* window = glfwCreateWindow(1024, 768, "Nepal flag", NULL, NULL);
	glfwMakeContextCurrent(window);
	glewInit();
	while (!glfwWindowShouldClose(window))
	{
		glBegin(GL_TRIANGLES);
		//blue upper triangle
		glColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(-0.5f, 0.75f);
		 glVertex2f(-0.5f, 0.2f);
		  glVertex2f(0.25f, 0.2f);
		//blue lower triangle
		glColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(-0.5f, 0.5f);
		glVertex2f(-0.5f, -0.5f);
		glVertex2f(0.25f, -0.5f);
		//red upper triangle
		glColor3f(1.0f, 0.0f, 0.0f);   glVertex3f(-0.45f, 0.65f, 0.0f);
		glVertex3f(-0.45f, 0.25f, 0.0f);
		glVertex3f(0.10f, 0.25f, 0.0f);
		//red lower triangle
		glColor3f(1.0f, 0.0f, 0.0f);   glVertex3f(-0.45f, 0.35f, 0.0f);
		glVertex3f(-0.45f, -0.45f, 0.0f);
		glVertex3f(0.15f, -0.45f, 0.0f);
		
		glEnd();
		
		
		
		glColor3f(1.0f, 1.0f, 1.0f);
		DrawCircle(-0.30f, 0.4f, 0.07f, 10000);
		glColor3f(1.0f, 0.0f, 0.0f);
		DrawCircle(-0.30f, 0.435f, 0.07f, 10000);
		DrawStar(-0.30, 0.382, 0.05, 20);
		DrawStar(-0.28, -0.18, 0.10, 20);
		

		glfwSwapBuffers(window);
		glfwPollEvents();
	}
	glfwTerminate();
	return 0;
}

